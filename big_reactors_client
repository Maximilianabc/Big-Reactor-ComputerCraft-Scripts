local position, mon, modem, turbine_data
local client_id = -1
local connected_server_id = -1
local available_servers = {}
local not_available_servers = {}	

local function sendToggleEngageMessage()
	rednet.send(connected_server_id, big_reactors.TOGGLE_ENGAGE_MESSAGE, big_reactors.MESSAGE_PROTOCOL)
end

local engageButton = buttons.Button:new(nil, "Engage", "Toggle Engage", sendToggleEngageMessage)
engageButton:setPosition(1, #big_reactors.dataItems + 4, 10, 3)
engageButton:setColor(colors.black, colors.white)

local turbine_buttons = { engageButton }

local function removeFromAvailableServers(server_id)
	local index = utils.contains(available_servers, server_id)
	if index >= 0 then
		table.remove(available_servers, index)
	end
end

local function handleConnectionResponse(server_id, message)
	if connected_server_id < 0 then
		if message == true then
			connected_server_id = server_id
			available_servers = {}
			print("Connected to server ("..server_id..").")
		else
			print("Connection to server ("..server_id..") was rejected.")
			removeFromAvailableServers(server_id)
			table.insert(not_available_servers, server_id)
		end
	else
		print("Failed to establish connection with server ("..server_id.."). Reason: a connection with other server already exist.")
		removeFromAvailableServers(server_id)
		table.insert(not_available_servers, server_id)
	end
end

local function handleReceivedData(turbine_arr)
	if not utils.isArray(turbine_arr) then
		print("Data received is not an array")
		return
	end
	if not #turbine_arr == #big_reactors.dataItems then
		print("Data array received does not match the length of data items. Expected: "..#big_reactors.dataItems.." Found: "..#turbine_arr)
		return
	end
	
	turbine_data:setContent({
		["Speed"] = turbine_arr[1],
		["Production"] = turbine_arr[2],
		["Steam"] = turbine_arr[3],
		["Water"] = turbine_arr[4],
		["Consumption"] = turbine_arr[5],
		["Engaged"] = turbine_arr[6]
	})
	
	turbine_data:output(mon)
end

local function handleMessage(message)
	if message["position"] ~= nil then
		print("Server position received")
		turbine_data.title = "BR Turbine "..message["position"]
	end
end

local function touchAsync()
	while true do
		local event, peripheral_name, c, r = os.pullEvent("monitor_touch")
		local clicked = buttons.getClicked(turbine_buttons, c, r)
		if (clicked ~= nil) then
			clicked:onClick()
		end
		sleep(0.25)
	end
end

local function receiveMessageAsync()
	while true do
		local sender, message, protocol = rednet.receive()
		if message ~= nil then
			if protocol == big_reactors.CONNECTION_PROTOCOL then
				print("Connection response received")
				handleConnectionResponse(sender, message)
			elseif protocol == big_reactors.DATA_PROTOCOL then
				handleReceivedData(message)
			elseif protocol == big_reactors.MESSAGE_PROTOCOL then
				handleMessage(message)
			elseif connected_server_id < 0 and protocol == big_reactors.BROADCAST_PROTOCOL then
				if utils.contains(not_available_servers, sender) < 0 then
					table.insert(available_servers, sender)
					rednet.send(sender, big_reactors.CONNECTION_REQUEST, big_reactors.CONNECTION_PROTOCOL)
					print("Sent connection request to server ("..sender..")")
				end
			end
		end
	end
end

function start()
	position = gps.getPosition()
	mon = peripheral.waitForConnection("monitor")
	turbine_data = data.Data:new(nil, "BR Turbine", {}, big_reactors.dataItems, big_reactors.dataColors)
	modem = peripheral.waitForConnection("modem", function(name, object) return object.isWireless() end)
	modem.open(1)
	rednet.open(big_reactors.WIRELESS_MODEM_SIDE)
	
	rednet.host(position, big_reactors.CONNECTION_PROTOCOL)
	rednet.host(position, big_reactors.MESSAGE_PROTOCOL)
	rednet.host(position, big_reactors.DATA_PROTOCOL)
	rednet.host(position, big_reactors.BROADCAST_PROTOCOL)
	mon.clear()
	
	for _, b in pairs(turbine_buttons) do 
		b:display(mon)
	end
	
	parallel.waitForAll(touchAsync, receiveMessageAsync)
end