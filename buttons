Base = {
	name = "",
	column = 0,
	row = 0,
	width = 0,
	height = 0,
	text = "",
	foreColor = colors.black,
	backColor = colors.black,
	action = nil,
	click = false
}

function Base:new(name, text, action)

	if utils.isEmptyString("name", name) ~= 0 
		or utils.isEmptyString("text", text) ~= 0
		or not utils.isOfType("action", action, "function")
		or not utils.isNotNull("action", action)
	then
		return nil
	end
	
	self.__index = self
	
	local base = {}
	setmetatable(base, Base)

	function base:setPosition(column, row, width, height)
		local largerThanZero = function(x) return x > 0 end
		if not (utils.areOfType({"column", "row", "width", "height"}, {column, row, width, height}, "number")
			and utils.conditionChecks({column, row, width, height}, largerThanZero))
		then
			error("fail to set position: at least one of the attributes (column, row, width, height) is not a number or is less than 1")
			return
		end
		if height % 2 == 0 or height <= 0 then
			print(string.format("fail to set position: height of button %s is not an odd number > 0", base.name))
		end
		
		base.column = column
		base.row = row
		base.height = height
		if #base.text > width then
			base.width = #base.text
		else
			base.width = width
		end
	end	
	function base:setColor(fore, back)
		if not utils.areOfType({"fore", "back"}, {fore, back}, "number") then
			error("fail to set color: at least one of the attributes (fore, back) is not a number")
			return
		end
		
		base.foreColor = fore
		base.backColor = back
	end
	
	function base:display(monitor)
		for i = 0, base.height - 1 do
			monitor.setCursorPos(base.column, base.row + i)
			monitor.setBackgroundColor(base.backColor)
			monitor.setTextColor(base.foreColor)
			if i ~= math.floor(base.height / 2) then
				monitor.write(string.rep(" ", base.width))
			else
				local pad = math.floor((base.width - #base.text) / 2);
				monitor.write(string.rep(" ", pad)..base.text..string.rep(" ", pad))
			end
		end
		monitor.setBackgroundColor(colors.black)
	end

	function base:onClick()
		base.action()
	end
		
	base.name = name
	base.text = text
	base.action = action
	base.click = false
	
	return base
	
end

function getClicked(buttons, c, r)
	if not utils.isOfType("buttons", buttons, "array") then
		error("fail to get clicked button: buttons is not an array")
		return nil
	end
	for _, b in pairs(buttons) do
		if getmetatable(b) ~= Base then
			error("fail to get clicked button: there is a non-button element in buttons")
			return nil
		end
		local col = b.column
		local row = b.row
		if c >= col and r >= row and c <= col + b.width and r <= row + b.height then
			return b
		end
	end
	return nil
end

SpinButton = {
	value = 0
}

function SpinButton:new(name, text, action, value)

	if not utils.isOfType("value", value, "number") then
		error("Value of a spin button must be a number (found: "..type(value)..")")
		return nil
	end
	
	self.__index = self
	setmetatable(SpinButton, {__index = Base})
	
	local spin = Base:new(name, text, action)	
	setmetatable(spin, SpinButton)
	
	function spin:onClick()
		spin.action(spin.value)
	end
	
	spin.value = value
	
	return spin
	
end

FlowControlButton = {
	direction = "",
	signal = ""
}

function FlowControlButton:new(name, text, action, value, direction, signal)

	if (direction ~= "in" and direction ~= "out") then
		error("\"direction\" of a flow control button must be \"in\" or \"out\"")
		return nil
	end
	if (signal ~= "high" and signal ~= "low") then
		error("\"signal\" of a flow control button must be \"high\" or \"low\"")
		return nil
	end
	
	self.__index = self
	setmetatable(FlowControlButton, {__index = SpinButton})
	
	local flow = SpinButton:new(name, text, action, value)
	setmetatable(flow, FlowControlButton)
	
	function flow:onClick()
		flow.action(value, direction, signal)
	end
	
	flow.direction = direction
	flow.signal = signal
	
	return flow
	
end
